#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::preferences::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_new__static_method__NativePreferenceStore_impl(
    root: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "new__static_method__NativePreferenceStore",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_root = root.wire2api();
            Ok(NativePreferenceStore::new(api_root))
        },
    )
}
fn wire_get__method__NativePreferenceStore_impl(
    that: impl Wire2Api<NativePreferenceStore> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get__method__NativePreferenceStore",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            Ok(NativePreferenceStore::get(&api_that, api_key))
        },
    )
}
fn wire_set__method__NativePreferenceStore_impl(
    that: impl Wire2Api<NativePreferenceStore> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set__method__NativePreferenceStore",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            let api_value = value.wire2api();
            Ok(NativePreferenceStore::set(&api_that, api_key, api_value))
        },
    )
}
fn wire_remove__method__NativePreferenceStore_impl(
    that: impl Wire2Api<NativePreferenceStore> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remove__method__NativePreferenceStore",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            Ok(NativePreferenceStore::remove(&api_that, api_key))
        },
    )
}
fn wire_remove_prefix__method__NativePreferenceStore_impl(
    that: impl Wire2Api<NativePreferenceStore> + UnwindSafe,
    prefix: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remove_prefix__method__NativePreferenceStore",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_prefix = prefix.wire2api();
            Ok(NativePreferenceStore::remove_prefix(&api_that, api_prefix))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for NativePreferenceStore {
    fn into_dart(self) -> support::DartAbi {
        vec![self.conn.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NativePreferenceStore {}
impl rust2dart::IntoIntoDart<NativePreferenceStore> for NativePreferenceStore {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
