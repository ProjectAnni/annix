// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class AnnixNative {
  Future<void> updateNetworkStatus({required bool isOnline, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateNetworkStatusConstMeta;

  Future<bool> isOnlineMethodNetworkStatus({required NetworkStatus that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsOnlineMethodNetworkStatusConstMeta;

  NativePreferenceStore newStaticMethodNativePreferenceStore({required String root, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodNativePreferenceStoreConstMeta;

  String? getMethodNativePreferenceStore({required NativePreferenceStore that, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMethodNativePreferenceStoreConstMeta;

  void setMethodNativePreferenceStore(
      {required NativePreferenceStore that, required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetMethodNativePreferenceStoreConstMeta;

  void removeMethodNativePreferenceStore({required NativePreferenceStore that, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveMethodNativePreferenceStoreConstMeta;

  void removePrefixMethodNativePreferenceStore(
      {required NativePreferenceStore that, required String prefix, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemovePrefixMethodNativePreferenceStoreConstMeta;

  Future<LocalDb> newStaticMethodLocalDb({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalDbConstMeta;

  Future<String?> getAlbumMethodLocalDb({required LocalDb that, required UuidValue albumId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodLocalDbConstMeta;

  Future<List<UuidValue>> getAlbumsByTagMethodLocalDb(
      {required LocalDb that, required String tag, required bool recursive, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumsByTagMethodLocalDbConstMeta;

  Future<List<TagItem>> getTagsMethodLocalDb({required LocalDb that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTagsMethodLocalDbConstMeta;

  LocalStore newStaticMethodLocalStore({required String root, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalStoreConstMeta;

  Future<void> insertMethodLocalStore(
      {required LocalStore that, required String category, required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInsertMethodLocalStoreConstMeta;

  Future<String?> getMethodLocalStore(
      {required LocalStore that, required String category, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMethodLocalStoreConstMeta;

  Future<void> clearMethodLocalStore({required LocalStore that, String? category, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearMethodLocalStoreConstMeta;

  AnnixPlayer newStaticMethodAnnixPlayer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodAnnixPlayerConstMeta;

  Future<void> playMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayMethodAnnixPlayerConstMeta;

  Future<void> pauseMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPauseMethodAnnixPlayerConstMeta;

  Future<void> openFileMethodAnnixPlayer({required AnnixPlayer that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenFileMethodAnnixPlayerConstMeta;

  Future<void> setVolumeMethodAnnixPlayer({required AnnixPlayer that, required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetVolumeMethodAnnixPlayerConstMeta;

  Future<void> stopMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopMethodAnnixPlayerConstMeta;

  Future<void> seekMethodAnnixPlayer({required AnnixPlayer that, required int position, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeekMethodAnnixPlayerConstMeta;

  bool isPlayingMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsPlayingMethodAnnixPlayerConstMeta;

  Stream<PlayerStateEvent> playerStateStreamMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayerStateStreamMethodAnnixPlayerConstMeta;

  Stream<ProgressState> progressStreamMethodAnnixPlayer({required AnnixPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgressStreamMethodAnnixPlayerConstMeta;

  DropFnType get dropOpaqueMutexConnection;
  ShareFnType get shareOpaqueMutexConnection;
  OpaqueTypeFinalizer get MutexConnectionFinalizer;

  DropFnType get dropOpaqueMutexRepoDatabaseRead;
  ShareFnType get shareOpaqueMutexRepoDatabaseRead;
  OpaqueTypeFinalizer get MutexRepoDatabaseReadFinalizer;

  DropFnType get dropOpaquePlayer;
  ShareFnType get shareOpaquePlayer;
  OpaqueTypeFinalizer get PlayerFinalizer;

  DropFnType get dropOpaqueStreamWrapperPlayerStateEvent;
  ShareFnType get shareOpaqueStreamWrapperPlayerStateEvent;
  OpaqueTypeFinalizer get StreamWrapperPlayerStateEventFinalizer;

  DropFnType get dropOpaqueStreamWrapperProgressState;
  ShareFnType get shareOpaqueStreamWrapperProgressState;
  OpaqueTypeFinalizer get StreamWrapperProgressStateFinalizer;
}

@sealed
class MutexConnection extends FrbOpaque {
  final AnnixNative bridge;
  MutexConnection.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexConnection;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexConnection;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexConnectionFinalizer;
}

@sealed
class MutexRepoDatabaseRead extends FrbOpaque {
  final AnnixNative bridge;
  MutexRepoDatabaseRead.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexRepoDatabaseRead;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexRepoDatabaseRead;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexRepoDatabaseReadFinalizer;
}

@sealed
class Player extends FrbOpaque {
  final AnnixNative bridge;
  Player.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaquePlayer;

  @override
  ShareFnType get shareFn => bridge.shareOpaquePlayer;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.PlayerFinalizer;
}

@sealed
class StreamWrapperPlayerStateEvent extends FrbOpaque {
  final AnnixNative bridge;
  StreamWrapperPlayerStateEvent.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueStreamWrapperPlayerStateEvent;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueStreamWrapperPlayerStateEvent;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.StreamWrapperPlayerStateEventFinalizer;
}

@sealed
class StreamWrapperProgressState extends FrbOpaque {
  final AnnixNative bridge;
  StreamWrapperProgressState.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueStreamWrapperProgressState;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueStreamWrapperProgressState;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.StreamWrapperProgressStateFinalizer;
}

class AnnixPlayer {
  final AnnixNative bridge;
  final Player player;
  final StreamWrapperPlayerStateEvent state;
  final StreamWrapperProgressState progress;

  const AnnixPlayer({
    required this.bridge,
    required this.player,
    required this.state,
    required this.progress,
  });

  static AnnixPlayer newAnnixPlayer({required AnnixNative bridge, dynamic hint}) =>
      bridge.newStaticMethodAnnixPlayer(hint: hint);

  Future<void> play({dynamic hint}) => bridge.playMethodAnnixPlayer(
        that: this,
      );

  Future<void> pause({dynamic hint}) => bridge.pauseMethodAnnixPlayer(
        that: this,
      );

  Future<void> openFile({required String path, dynamic hint}) => bridge.openFileMethodAnnixPlayer(
        that: this,
        path: path,
      );

  Future<void> setVolume({required double volume, dynamic hint}) => bridge.setVolumeMethodAnnixPlayer(
        that: this,
        volume: volume,
      );

  Future<void> stop({dynamic hint}) => bridge.stopMethodAnnixPlayer(
        that: this,
      );

  Future<void> seek({required int position, dynamic hint}) => bridge.seekMethodAnnixPlayer(
        that: this,
        position: position,
      );

  bool isPlaying({dynamic hint}) => bridge.isPlayingMethodAnnixPlayer(
        that: this,
      );

  Stream<PlayerStateEvent> playerStateStream({dynamic hint}) => bridge.playerStateStreamMethodAnnixPlayer(
        that: this,
      );

  Stream<ProgressState> progressStream({dynamic hint}) => bridge.progressStreamMethodAnnixPlayer(
        that: this,
      );
}

/// Repo
class LocalDb {
  final AnnixNative bridge;
  final MutexRepoDatabaseRead repo;

  const LocalDb({
    required this.bridge,
    required this.repo,
  });

  static Future<LocalDb> newLocalDb({required AnnixNative bridge, required String path, dynamic hint}) =>
      bridge.newStaticMethodLocalDb(path: path, hint: hint);

  Future<String?> getAlbum({required UuidValue albumId, dynamic hint}) => bridge.getAlbumMethodLocalDb(
        that: this,
        albumId: albumId,
      );

  Future<List<UuidValue>> getAlbumsByTag({required String tag, required bool recursive, dynamic hint}) =>
      bridge.getAlbumsByTagMethodLocalDb(
        that: this,
        tag: tag,
        recursive: recursive,
      );

  Future<List<TagItem>> getTags({dynamic hint}) => bridge.getTagsMethodLocalDb(
        that: this,
      );
}

class LocalStore {
  final AnnixNative bridge;
  final MutexConnection conn;

  const LocalStore({
    required this.bridge,
    required this.conn,
  });

  static LocalStore newLocalStore({required AnnixNative bridge, required String root, dynamic hint}) =>
      bridge.newStaticMethodLocalStore(root: root, hint: hint);

  Future<void> insert({required String category, required String key, required String value, dynamic hint}) =>
      bridge.insertMethodLocalStore(
        that: this,
        category: category,
        key: key,
        value: value,
      );

  Future<String?> get({required String category, required String key, dynamic hint}) => bridge.getMethodLocalStore(
        that: this,
        category: category,
        key: key,
      );

  Future<void> clear({String? category, dynamic hint}) => bridge.clearMethodLocalStore(
        that: this,
        category: category,
      );
}

/// Preferences
class NativePreferenceStore {
  final AnnixNative bridge;
  final MutexConnection conn;

  const NativePreferenceStore({
    required this.bridge,
    required this.conn,
  });

  static NativePreferenceStore newNativePreferenceStore(
          {required AnnixNative bridge, required String root, dynamic hint}) =>
      bridge.newStaticMethodNativePreferenceStore(root: root, hint: hint);

  String? get({required String key, dynamic hint}) => bridge.getMethodNativePreferenceStore(
        that: this,
        key: key,
      );

  void set({required String key, required String value, dynamic hint}) => bridge.setMethodNativePreferenceStore(
        that: this,
        key: key,
        value: value,
      );

  void remove({required String key, dynamic hint}) => bridge.removeMethodNativePreferenceStore(
        that: this,
        key: key,
      );

  void removePrefix({required String prefix, dynamic hint}) => bridge.removePrefixMethodNativePreferenceStore(
        that: this,
        prefix: prefix,
      );
}

enum NetworkStatus {
  online,
  offline,
}

enum PlayerStateEvent {
  /// Started playing
  play,

  /// Paused
  pause,

  /// Stopped playing
  stop,
}

class ProgressState {
  final int position;
  final int duration;

  const ProgressState({
    required this.position,
    required this.duration,
  });
}

class TagItem {
  final String name;
  final List<String> children;

  const TagItem({
    required this.name,
    required this.children,
  });
}
