// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class AnnixNative {
  Future<void> updateNetworkStatus({required final bool isOnline, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateNetworkStatusConstMeta;

  NativePreferenceStore newStaticMethodNativePreferenceStore({required final String root, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodNativePreferenceStoreConstMeta;

  String? getMethodNativePreferenceStore({required final NativePreferenceStore that, required final String key, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMethodNativePreferenceStoreConstMeta;

  void setMethodNativePreferenceStore(
      {required final NativePreferenceStore that, required final String key, required final String value, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetMethodNativePreferenceStoreConstMeta;

  void removeMethodNativePreferenceStore({required final NativePreferenceStore that, required final String key, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveMethodNativePreferenceStoreConstMeta;

  void removePrefixMethodNativePreferenceStore(
      {required final NativePreferenceStore that, required final String prefix, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemovePrefixMethodNativePreferenceStoreConstMeta;

  LocalStore newStaticMethodLocalStore({required final String root, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalStoreConstMeta;

  Future<void> insertMethodLocalStore(
      {required final LocalStore that, required final String category, required final String key, required final String value, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInsertMethodLocalStoreConstMeta;

  Future<String?> getMethodLocalStore(
      {required final LocalStore that, required final String category, required final String key, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMethodLocalStoreConstMeta;

  Future<void> clearMethodLocalStore({required final LocalStore that, final String? category, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearMethodLocalStoreConstMeta;

  Future<LocalDb> newStaticMethodLocalDb({required final String path, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalDbConstMeta;

  Future<String?> getAlbumMethodLocalDb({required final LocalDb that, required final UuidValue albumId, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodLocalDbConstMeta;

  Future<List<UuidValue>> getAlbumsByTagMethodLocalDb(
      {required final LocalDb that, required final String tag, required final bool recursive, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumsByTagMethodLocalDbConstMeta;

  Future<List<TagItem>> getTagsMethodLocalDb({required final LocalDb that, final dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTagsMethodLocalDbConstMeta;

  DropFnType get dropOpaqueMutexConnection;
  ShareFnType get shareOpaqueMutexConnection;
  OpaqueTypeFinalizer get MutexConnectionFinalizer;

  DropFnType get dropOpaqueMutexRepoDatabaseRead;
  ShareFnType get shareOpaqueMutexRepoDatabaseRead;
  OpaqueTypeFinalizer get MutexRepoDatabaseReadFinalizer;
}

@sealed
class MutexConnection extends FrbOpaque {
  final AnnixNative bridge;
  MutexConnection.fromRaw(final int ptr, final int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexConnection;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexConnection;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexConnectionFinalizer;
}

@sealed
class MutexRepoDatabaseRead extends FrbOpaque {
  final AnnixNative bridge;
  MutexRepoDatabaseRead.fromRaw(final int ptr, final int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexRepoDatabaseRead;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexRepoDatabaseRead;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexRepoDatabaseReadFinalizer;
}

class LocalDb {
  final AnnixNative bridge;
  final MutexRepoDatabaseRead repo;

  const LocalDb({
    required this.bridge,
    required this.repo,
  });

  static Future<LocalDb> newLocalDb({required final AnnixNative bridge, required final String path, final dynamic hint}) =>
      bridge.newStaticMethodLocalDb(path: path, hint: hint);

  Future<String?> getAlbum({required final UuidValue albumId, final dynamic hint}) => bridge.getAlbumMethodLocalDb(
        that: this,
        albumId: albumId,
      );

  Future<List<UuidValue>> getAlbumsByTag({required final String tag, required final bool recursive, final dynamic hint}) =>
      bridge.getAlbumsByTagMethodLocalDb(
        that: this,
        tag: tag,
        recursive: recursive,
      );

  Future<List<TagItem>> getTags({final dynamic hint}) => bridge.getTagsMethodLocalDb(
        that: this,
      );
}

class LocalStore {
  final AnnixNative bridge;
  final MutexConnection conn;

  const LocalStore({
    required this.bridge,
    required this.conn,
  });

  static LocalStore newLocalStore({required final AnnixNative bridge, required final String root, final dynamic hint}) =>
      bridge.newStaticMethodLocalStore(root: root, hint: hint);

  Future<void> insert({required final String category, required final String key, required final String value, final dynamic hint}) =>
      bridge.insertMethodLocalStore(
        that: this,
        category: category,
        key: key,
        value: value,
      );

  Future<String?> get({required final String category, required final String key, final dynamic hint}) => bridge.getMethodLocalStore(
        that: this,
        category: category,
        key: key,
      );

  Future<void> clear({final String? category, final dynamic hint}) => bridge.clearMethodLocalStore(
        that: this,
        category: category,
      );
}

class NativePreferenceStore {
  final AnnixNative bridge;
  final MutexConnection conn;

  const NativePreferenceStore({
    required this.bridge,
    required this.conn,
  });

  static NativePreferenceStore newNativePreferenceStore(
          {required final AnnixNative bridge, required final String root, final dynamic hint}) =>
      bridge.newStaticMethodNativePreferenceStore(root: root, hint: hint);

  String? get({required final String key, final dynamic hint}) => bridge.getMethodNativePreferenceStore(
        that: this,
        key: key,
      );

  void set({required final String key, required final String value, final dynamic hint}) => bridge.setMethodNativePreferenceStore(
        that: this,
        key: key,
        value: value,
      );

  void remove({required final String key, final dynamic hint}) => bridge.removeMethodNativePreferenceStore(
        that: this,
        key: key,
      );

  void removePrefix({required final String prefix, final dynamic hint}) => bridge.removePrefixMethodNativePreferenceStore(
        that: this,
        prefix: prefix,
      );
}

class TagItem {
  final String name;
  final List<String> children;

  const TagItem({
    required this.name,
    required this.children,
  });
}
