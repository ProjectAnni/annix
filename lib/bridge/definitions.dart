// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.71.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class AnnixNative {
  Future<LocalDb> newStaticMethodLocalDb({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalDbConstMeta;

  Future<String?> getAlbumMethodLocalDb({required LocalDb that, required UuidValue albumId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodLocalDbConstMeta;

  Future<List<UuidValue>> getAlbumsByTagMethodLocalDb(
      {required LocalDb that, required String tag, required bool recursive, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumsByTagMethodLocalDbConstMeta;

  Future<List<TagItem>> getTagsMethodLocalDb({required LocalDb that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTagsMethodLocalDbConstMeta;

  DropFnType get dropOpaqueMutexRepoDatabaseRead;
  ShareFnType get shareOpaqueMutexRepoDatabaseRead;
  OpaqueTypeFinalizer get MutexRepoDatabaseReadFinalizer;
}

@sealed
class MutexRepoDatabaseRead extends FrbOpaque {
  final AnnixNative bridge;
  MutexRepoDatabaseRead.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMutexRepoDatabaseRead;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMutexRepoDatabaseRead;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MutexRepoDatabaseReadFinalizer;
}

class LocalDb {
  final AnnixNative bridge;
  final MutexRepoDatabaseRead repo;

  const LocalDb({
    required this.bridge,
    required this.repo,
  });

  static Future<LocalDb> newLocalDb({required AnnixNative bridge, required String path, dynamic hint}) =>
      bridge.newStaticMethodLocalDb(path: path, hint: hint);

  Future<String?> getAlbum({required UuidValue albumId, dynamic hint}) => bridge.getAlbumMethodLocalDb(
        that: this,
        albumId: albumId,
      );

  Future<List<UuidValue>> getAlbumsByTag({required String tag, required bool recursive, dynamic hint}) =>
      bridge.getAlbumsByTagMethodLocalDb(
        that: this,
        tag: tag,
        recursive: recursive,
      );

  Future<List<TagItem>> getTags({dynamic hint}) => bridge.getTagsMethodLocalDb(
        that: this,
      );
}

class TagItem {
  final String name;
  final List<String> children;

  const TagItem({
    required this.name,
    required this.children,
  });
}
