// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class AnnixNativeImpl implements AnnixNative {
  final AnnixNativePlatform _platform;
  factory AnnixNativeImpl(ExternalLibrary dylib) => AnnixNativeImpl.raw(AnnixNativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory AnnixNativeImpl.wasm(FutureOr<WasmModule> module) => AnnixNativeImpl(module as ExternalLibrary);
  AnnixNativeImpl.raw(this._platform);
  Future<void> updateNetworkStatus({required bool isOnline, dynamic hint}) {
    var arg0 = isOnline;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_network_status(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateNetworkStatusConstMeta,
      argValues: [isOnline],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateNetworkStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_network_status",
        argNames: ["isOnline"],
      );

  Future<bool> isOnlineMethodNetworkStatus({required NetworkStatus that, dynamic hint}) {
    var arg0 = api2wire_network_status(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_online__method__NetworkStatus(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsOnlineMethodNetworkStatusConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsOnlineMethodNetworkStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_online__method__NetworkStatus",
        argNames: ["that"],
      );

  NativePreferenceStore newStaticMethodNativePreferenceStore({required String root, dynamic hint}) {
    var arg0 = _platform.api2wire_String(root);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_new__static_method__NativePreferenceStore(arg0),
      parseSuccessData: _wire2api_native_preference_store,
      constMeta: kNewStaticMethodNativePreferenceStoreConstMeta,
      argValues: [root],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodNativePreferenceStoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__NativePreferenceStore",
        argNames: ["root"],
      );

  String? getMethodNativePreferenceStore({required NativePreferenceStore that, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_native_preference_store(that);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get__method__NativePreferenceStore(arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetMethodNativePreferenceStoreConstMeta,
      argValues: [that, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMethodNativePreferenceStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get__method__NativePreferenceStore",
        argNames: ["that", "key"],
      );

  void setMethodNativePreferenceStore(
      {required NativePreferenceStore that, required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_native_preference_store(that);
    var arg1 = _platform.api2wire_String(key);
    var arg2 = _platform.api2wire_String(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_set__method__NativePreferenceStore(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetMethodNativePreferenceStoreConstMeta,
      argValues: [that, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetMethodNativePreferenceStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set__method__NativePreferenceStore",
        argNames: ["that", "key", "value"],
      );

  void removeMethodNativePreferenceStore({required NativePreferenceStore that, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_native_preference_store(that);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove__method__NativePreferenceStore(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoveMethodNativePreferenceStoreConstMeta,
      argValues: [that, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveMethodNativePreferenceStoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove__method__NativePreferenceStore",
        argNames: ["that", "key"],
      );

  void removePrefixMethodNativePreferenceStore(
      {required NativePreferenceStore that, required String prefix, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_native_preference_store(that);
    var arg1 = _platform.api2wire_String(prefix);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove_prefix__method__NativePreferenceStore(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemovePrefixMethodNativePreferenceStoreConstMeta,
      argValues: [that, prefix],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemovePrefixMethodNativePreferenceStoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_prefix__method__NativePreferenceStore",
        argNames: ["that", "prefix"],
      );

  Future<LocalDb> newStaticMethodLocalDb({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__LocalDb(port_, arg0),
      parseSuccessData: (d) => _wire2api_local_db(d),
      constMeta: kNewStaticMethodLocalDbConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalDbConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__LocalDb",
        argNames: ["path"],
      );

  Future<String?> getAlbumMethodLocalDb({required LocalDb that, required UuidValue albumId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_db(that);
    var arg1 = _platform.api2wire_Uuid(albumId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_album__method__LocalDb(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetAlbumMethodLocalDbConstMeta,
      argValues: [that, albumId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodLocalDbConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_album__method__LocalDb",
        argNames: ["that", "albumId"],
      );

  Future<List<UuidValue>> getAlbumsByTagMethodLocalDb(
      {required LocalDb that, required String tag, required bool recursive, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_db(that);
    var arg1 = _platform.api2wire_String(tag);
    var arg2 = recursive;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_albums_by_tag__method__LocalDb(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_Uuids,
      constMeta: kGetAlbumsByTagMethodLocalDbConstMeta,
      argValues: [that, tag, recursive],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAlbumsByTagMethodLocalDbConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_albums_by_tag__method__LocalDb",
        argNames: ["that", "tag", "recursive"],
      );

  Future<List<TagItem>> getTagsMethodLocalDb({required LocalDb that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_db(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_tags__method__LocalDb(port_, arg0),
      parseSuccessData: _wire2api_list_tag_item,
      constMeta: kGetTagsMethodLocalDbConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTagsMethodLocalDbConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_tags__method__LocalDb",
        argNames: ["that"],
      );

  LocalStore newStaticMethodLocalStore({required String root, dynamic hint}) {
    var arg0 = _platform.api2wire_String(root);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_new__static_method__LocalStore(arg0),
      parseSuccessData: _wire2api_local_store,
      constMeta: kNewStaticMethodLocalStoreConstMeta,
      argValues: [root],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodLocalStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__LocalStore",
        argNames: ["root"],
      );

  Future<void> insertMethodLocalStore(
      {required LocalStore that, required String category, required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_store(that);
    var arg1 = _platform.api2wire_String(category);
    var arg2 = _platform.api2wire_String(key);
    var arg3 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_insert__method__LocalStore(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kInsertMethodLocalStoreConstMeta,
      argValues: [that, category, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInsertMethodLocalStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "insert__method__LocalStore",
        argNames: ["that", "category", "key", "value"],
      );

  Future<String?> getMethodLocalStore(
      {required LocalStore that, required String category, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_store(that);
    var arg1 = _platform.api2wire_String(category);
    var arg2 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get__method__LocalStore(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetMethodLocalStoreConstMeta,
      argValues: [that, category, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMethodLocalStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get__method__LocalStore",
        argNames: ["that", "category", "key"],
      );

  Future<void> clearMethodLocalStore({required LocalStore that, String? category, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_local_store(that);
    var arg1 = _platform.api2wire_opt_String(category);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear__method__LocalStore(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kClearMethodLocalStoreConstMeta,
      argValues: [that, category],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearMethodLocalStoreConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "clear__method__LocalStore",
        argNames: ["that", "category"],
      );

  AnnixPlayer newStaticMethodAnnixPlayer({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_new__static_method__AnnixPlayer(),
      parseSuccessData: _wire2api_annix_player,
      constMeta: kNewStaticMethodAnnixPlayerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__AnnixPlayer",
        argNames: [],
      );

  Future<void> playMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_play__method__AnnixPlayer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPlayMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "play__method__AnnixPlayer",
        argNames: ["that"],
      );

  Future<void> pauseMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_pause__method__AnnixPlayer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPauseMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPauseMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "pause__method__AnnixPlayer",
        argNames: ["that"],
      );

  Future<void> openFileMethodAnnixPlayer({required AnnixPlayer that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_file__method__AnnixPlayer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kOpenFileMethodAnnixPlayerConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenFileMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "open_file__method__AnnixPlayer",
        argNames: ["that", "path"],
      );

  Future<void> setVolumeMethodAnnixPlayer({required AnnixPlayer that, required double volume, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    var arg1 = api2wire_f32(volume);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_volume__method__AnnixPlayer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetVolumeMethodAnnixPlayerConstMeta,
      argValues: [that, volume],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetVolumeMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_volume__method__AnnixPlayer",
        argNames: ["that", "volume"],
      );

  Future<void> stopMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop__method__AnnixPlayer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "stop__method__AnnixPlayer",
        argNames: ["that"],
      );

  Future<void> seekMethodAnnixPlayer({required AnnixPlayer that, required int position, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    var arg1 = _platform.api2wire_u64(position);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_seek__method__AnnixPlayer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSeekMethodAnnixPlayerConstMeta,
      argValues: [that, position],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSeekMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "seek__method__AnnixPlayer",
        argNames: ["that", "position"],
      );

  bool isPlayingMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_playing__method__AnnixPlayer(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsPlayingMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsPlayingMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_playing__method__AnnixPlayer",
        argNames: ["that"],
      );

  Stream<PlayerStateEvent> playerStateStreamMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_player_state_stream__method__AnnixPlayer(port_, arg0),
      parseSuccessData: _wire2api_player_state_event,
      constMeta: kPlayerStateStreamMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayerStateStreamMethodAnnixPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "player_state_stream__method__AnnixPlayer",
        argNames: ["that"],
      );

  Stream<ProgressState> progressStreamMethodAnnixPlayer({required AnnixPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_annix_player(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_progress_stream__method__AnnixPlayer(port_, arg0),
      parseSuccessData: _wire2api_progress_state,
      constMeta: kProgressStreamMethodAnnixPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProgressStreamMethodAnnixPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "progress_stream__method__AnnixPlayer",
        argNames: ["that"],
      );

  DropFnType get dropOpaqueMutexConnection => _platform.inner.drop_opaque_MutexConnection;
  ShareFnType get shareOpaqueMutexConnection => _platform.inner.share_opaque_MutexConnection;
  OpaqueTypeFinalizer get MutexConnectionFinalizer => _platform.MutexConnectionFinalizer;

  DropFnType get dropOpaqueMutexRepoDatabaseRead => _platform.inner.drop_opaque_MutexRepoDatabaseRead;
  ShareFnType get shareOpaqueMutexRepoDatabaseRead => _platform.inner.share_opaque_MutexRepoDatabaseRead;
  OpaqueTypeFinalizer get MutexRepoDatabaseReadFinalizer => _platform.MutexRepoDatabaseReadFinalizer;

  DropFnType get dropOpaquePlayer => _platform.inner.drop_opaque_Player;
  ShareFnType get shareOpaquePlayer => _platform.inner.share_opaque_Player;
  OpaqueTypeFinalizer get PlayerFinalizer => _platform.PlayerFinalizer;

  DropFnType get dropOpaqueStreamWrapperPlayerStateEvent => _platform.inner.drop_opaque_StreamWrapperPlayerStateEvent;
  ShareFnType get shareOpaqueStreamWrapperPlayerStateEvent =>
      _platform.inner.share_opaque_StreamWrapperPlayerStateEvent;
  OpaqueTypeFinalizer get StreamWrapperPlayerStateEventFinalizer => _platform.StreamWrapperPlayerStateEventFinalizer;

  DropFnType get dropOpaqueStreamWrapperProgressState => _platform.inner.drop_opaque_StreamWrapperProgressState;
  ShareFnType get shareOpaqueStreamWrapperProgressState => _platform.inner.share_opaque_StreamWrapperProgressState;
  OpaqueTypeFinalizer get StreamWrapperProgressStateFinalizer => _platform.StreamWrapperProgressStateFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  MutexConnection _wire2api_MutexConnection(dynamic raw) {
    return MutexConnection.fromRaw(raw[0], raw[1], this);
  }

  MutexRepoDatabaseRead _wire2api_MutexRepoDatabaseRead(dynamic raw) {
    return MutexRepoDatabaseRead.fromRaw(raw[0], raw[1], this);
  }

  Player _wire2api_Player(dynamic raw) {
    return Player.fromRaw(raw[0], raw[1], this);
  }

  StreamWrapperPlayerStateEvent _wire2api_StreamWrapperPlayerStateEvent(dynamic raw) {
    return StreamWrapperPlayerStateEvent.fromRaw(raw[0], raw[1], this);
  }

  StreamWrapperProgressState _wire2api_StreamWrapperProgressState(dynamic raw) {
    return StreamWrapperProgressState.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  List<UuidValue> _wire2api_Uuids(dynamic raw) {
    final bytes = _wire2api_uint_8_list(raw);
    return wire2apiUuids(bytes);
  }

  AnnixPlayer _wire2api_annix_player(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AnnixPlayer(
      bridge: this,
      player: _wire2api_Player(arr[0]),
      state: _wire2api_StreamWrapperPlayerStateEvent(arr[1]),
      progress: _wire2api_StreamWrapperProgressState(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<TagItem> _wire2api_list_tag_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_tag_item).toList();
  }

  LocalDb _wire2api_local_db(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LocalDb(
      bridge: this,
      repo: _wire2api_MutexRepoDatabaseRead(arr[0]),
    );
  }

  LocalStore _wire2api_local_store(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LocalStore(
      bridge: this,
      conn: _wire2api_MutexConnection(arr[0]),
    );
  }

  NativePreferenceStore _wire2api_native_preference_store(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NativePreferenceStore(
      bridge: this,
      conn: _wire2api_MutexConnection(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  PlayerStateEvent _wire2api_player_state_event(dynamic raw) {
    return PlayerStateEvent.values[raw as int];
  }

  ProgressState _wire2api_progress_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProgressState(
      position: _wire2api_u64(arr[0]),
      duration: _wire2api_u64(arr[1]),
    );
  }

  TagItem _wire2api_tag_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagItem(
      name: _wire2api_String(arr[0]),
      children: _wire2api_StringList(arr[1]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network_status(NetworkStatus raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class AnnixNativePlatform extends FlutterRustBridgeBase<AnnixNativeWire> {
  AnnixNativePlatform(ffi.DynamicLibrary dylib) : super(AnnixNativeWire(dylib));

// Section: api2wire

  @protected
  wire_MutexConnection api2wire_MutexConnection(MutexConnection raw) {
    final ptr = inner.new_MutexConnection();
    _api_fill_to_wire_MutexConnection(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexRepoDatabaseRead api2wire_MutexRepoDatabaseRead(MutexRepoDatabaseRead raw) {
    final ptr = inner.new_MutexRepoDatabaseRead();
    _api_fill_to_wire_MutexRepoDatabaseRead(raw, ptr);
    return ptr;
  }

  @protected
  wire_Player api2wire_Player(Player raw) {
    final ptr = inner.new_Player();
    _api_fill_to_wire_Player(raw, ptr);
    return ptr;
  }

  @protected
  wire_StreamWrapperPlayerStateEvent api2wire_StreamWrapperPlayerStateEvent(StreamWrapperPlayerStateEvent raw) {
    final ptr = inner.new_StreamWrapperPlayerStateEvent();
    _api_fill_to_wire_StreamWrapperPlayerStateEvent(raw, ptr);
    return ptr;
  }

  @protected
  wire_StreamWrapperProgressState api2wire_StreamWrapperProgressState(StreamWrapperProgressState raw) {
    final ptr = inner.new_StreamWrapperProgressState();
    _api_fill_to_wire_StreamWrapperProgressState(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_AnnixPlayer> api2wire_box_autoadd_annix_player(AnnixPlayer raw) {
    final ptr = inner.new_box_autoadd_annix_player_0();
    _api_fill_to_wire_annix_player(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LocalDb> api2wire_box_autoadd_local_db(LocalDb raw) {
    final ptr = inner.new_box_autoadd_local_db_0();
    _api_fill_to_wire_local_db(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LocalStore> api2wire_box_autoadd_local_store(LocalStore raw) {
    final ptr = inner.new_box_autoadd_local_store_0();
    _api_fill_to_wire_local_store(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NativePreferenceStore> api2wire_box_autoadd_native_preference_store(NativePreferenceStore raw) {
    final ptr = inner.new_box_autoadd_native_preference_store_0();
    _api_fill_to_wire_native_preference_store(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _MutexConnectionFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexConnectionPtr);
  OpaqueTypeFinalizer get MutexConnectionFinalizer => _MutexConnectionFinalizer;
  late final OpaqueTypeFinalizer _MutexRepoDatabaseReadFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexRepoDatabaseReadPtr);
  OpaqueTypeFinalizer get MutexRepoDatabaseReadFinalizer => _MutexRepoDatabaseReadFinalizer;
  late final OpaqueTypeFinalizer _PlayerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_PlayerPtr);
  OpaqueTypeFinalizer get PlayerFinalizer => _PlayerFinalizer;
  late final OpaqueTypeFinalizer _StreamWrapperPlayerStateEventFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_StreamWrapperPlayerStateEventPtr);
  OpaqueTypeFinalizer get StreamWrapperPlayerStateEventFinalizer => _StreamWrapperPlayerStateEventFinalizer;
  late final OpaqueTypeFinalizer _StreamWrapperProgressStateFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_StreamWrapperProgressStatePtr);
  OpaqueTypeFinalizer get StreamWrapperProgressStateFinalizer => _StreamWrapperProgressStateFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_MutexConnection(MutexConnection apiObj, wire_MutexConnection wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexRepoDatabaseRead(MutexRepoDatabaseRead apiObj, wire_MutexRepoDatabaseRead wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_Player(Player apiObj, wire_Player wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_StreamWrapperPlayerStateEvent(
      StreamWrapperPlayerStateEvent apiObj, wire_StreamWrapperPlayerStateEvent wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_StreamWrapperProgressState(
      StreamWrapperProgressState apiObj, wire_StreamWrapperProgressState wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_annix_player(AnnixPlayer apiObj, wire_AnnixPlayer wireObj) {
    wireObj.player = api2wire_Player(apiObj.player);
    wireObj._state = api2wire_StreamWrapperPlayerStateEvent(apiObj.state);
    wireObj._progress = api2wire_StreamWrapperProgressState(apiObj.progress);
  }

  void _api_fill_to_wire_box_autoadd_annix_player(AnnixPlayer apiObj, ffi.Pointer<wire_AnnixPlayer> wireObj) {
    _api_fill_to_wire_annix_player(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_local_db(LocalDb apiObj, ffi.Pointer<wire_LocalDb> wireObj) {
    _api_fill_to_wire_local_db(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_local_store(LocalStore apiObj, ffi.Pointer<wire_LocalStore> wireObj) {
    _api_fill_to_wire_local_store(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_native_preference_store(
      NativePreferenceStore apiObj, ffi.Pointer<wire_NativePreferenceStore> wireObj) {
    _api_fill_to_wire_native_preference_store(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_local_db(LocalDb apiObj, wire_LocalDb wireObj) {
    wireObj.repo = api2wire_MutexRepoDatabaseRead(apiObj.repo);
  }

  void _api_fill_to_wire_local_store(LocalStore apiObj, wire_LocalStore wireObj) {
    wireObj.conn = api2wire_MutexConnection(apiObj.conn);
  }

  void _api_fill_to_wire_native_preference_store(NativePreferenceStore apiObj, wire_NativePreferenceStore wireObj) {
    wireObj.conn = api2wire_MutexConnection(apiObj.conn);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class AnnixNativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AnnixNativeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AnnixNativeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_update_network_status(
    int port_,
    bool is_online,
  ) {
    return _wire_update_network_status(
      port_,
      is_online,
    );
  }

  late final _wire_update_network_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>('wire_update_network_status');
  late final _wire_update_network_status = _wire_update_network_statusPtr.asFunction<void Function(int, bool)>();

  void wire_is_online__method__NetworkStatus(
    int port_,
    int that,
  ) {
    return _wire_is_online__method__NetworkStatus(
      port_,
      that,
    );
  }

  late final _wire_is_online__method__NetworkStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_is_online__method__NetworkStatus');
  late final _wire_is_online__method__NetworkStatus =
      _wire_is_online__method__NetworkStatusPtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_new__static_method__NativePreferenceStore(
    ffi.Pointer<wire_uint_8_list> root,
  ) {
    return _wire_new__static_method__NativePreferenceStore(
      root,
    );
  }

  late final _wire_new__static_method__NativePreferenceStorePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__NativePreferenceStore');
  late final _wire_new__static_method__NativePreferenceStore = _wire_new__static_method__NativePreferenceStorePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_get__method__NativePreferenceStore(
    ffi.Pointer<wire_NativePreferenceStore> that,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_get__method__NativePreferenceStore(
      that,
      key,
    );
  }

  late final _wire_get__method__NativePreferenceStorePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get__method__NativePreferenceStore');
  late final _wire_get__method__NativePreferenceStore = _wire_get__method__NativePreferenceStorePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_set__method__NativePreferenceStore(
    ffi.Pointer<wire_NativePreferenceStore> that,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_set__method__NativePreferenceStore(
      that,
      key,
      value,
    );
  }

  late final _wire_set__method__NativePreferenceStorePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set__method__NativePreferenceStore');
  late final _wire_set__method__NativePreferenceStore = _wire_set__method__NativePreferenceStorePtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_NativePreferenceStore>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_remove__method__NativePreferenceStore(
    ffi.Pointer<wire_NativePreferenceStore> that,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_remove__method__NativePreferenceStore(
      that,
      key,
    );
  }

  late final _wire_remove__method__NativePreferenceStorePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_remove__method__NativePreferenceStore');
  late final _wire_remove__method__NativePreferenceStore = _wire_remove__method__NativePreferenceStorePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_remove_prefix__method__NativePreferenceStore(
    ffi.Pointer<wire_NativePreferenceStore> that,
    ffi.Pointer<wire_uint_8_list> prefix,
  ) {
    return _wire_remove_prefix__method__NativePreferenceStore(
      that,
      prefix,
    );
  }

  late final _wire_remove_prefix__method__NativePreferenceStorePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_remove_prefix__method__NativePreferenceStore');
  late final _wire_remove_prefix__method__NativePreferenceStore = _wire_remove_prefix__method__NativePreferenceStorePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_NativePreferenceStore>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new__static_method__LocalDb(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_new__static_method__LocalDb(
      port_,
      path,
    );
  }

  late final _wire_new__static_method__LocalDbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__LocalDb');
  late final _wire_new__static_method__LocalDb =
      _wire_new__static_method__LocalDbPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_album__method__LocalDb(
    int port_,
    ffi.Pointer<wire_LocalDb> that,
    ffi.Pointer<wire_uint_8_list> album_id,
  ) {
    return _wire_get_album__method__LocalDb(
      port_,
      that,
      album_id,
    );
  }

  late final _wire_get_album__method__LocalDbPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalDb>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_album__method__LocalDb');
  late final _wire_get_album__method__LocalDb = _wire_get_album__method__LocalDbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_LocalDb>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_albums_by_tag__method__LocalDb(
    int port_,
    ffi.Pointer<wire_LocalDb> that,
    ffi.Pointer<wire_uint_8_list> tag,
    bool recursive,
  ) {
    return _wire_get_albums_by_tag__method__LocalDb(
      port_,
      that,
      tag,
      recursive,
    );
  }

  late final _wire_get_albums_by_tag__method__LocalDbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalDb>, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_get_albums_by_tag__method__LocalDb');
  late final _wire_get_albums_by_tag__method__LocalDb = _wire_get_albums_by_tag__method__LocalDbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_LocalDb>, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_get_tags__method__LocalDb(
    int port_,
    ffi.Pointer<wire_LocalDb> that,
  ) {
    return _wire_get_tags__method__LocalDb(
      port_,
      that,
    );
  }

  late final _wire_get_tags__method__LocalDbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalDb>)>>(
          'wire_get_tags__method__LocalDb');
  late final _wire_get_tags__method__LocalDb =
      _wire_get_tags__method__LocalDbPtr.asFunction<void Function(int, ffi.Pointer<wire_LocalDb>)>();

  WireSyncReturn wire_new__static_method__LocalStore(
    ffi.Pointer<wire_uint_8_list> root,
  ) {
    return _wire_new__static_method__LocalStore(
      root,
    );
  }

  late final _wire_new__static_method__LocalStorePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__LocalStore');
  late final _wire_new__static_method__LocalStore =
      _wire_new__static_method__LocalStorePtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_insert__method__LocalStore(
    int port_,
    ffi.Pointer<wire_LocalStore> that,
    ffi.Pointer<wire_uint_8_list> category,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_insert__method__LocalStore(
      port_,
      that,
      category,
      key,
      value,
    );
  }

  late final _wire_insert__method__LocalStorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_insert__method__LocalStore');
  late final _wire_insert__method__LocalStore = _wire_insert__method__LocalStorePtr.asFunction<
      void Function(int, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get__method__LocalStore(
    int port_,
    ffi.Pointer<wire_LocalStore> that,
    ffi.Pointer<wire_uint_8_list> category,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_get__method__LocalStore(
      port_,
      that,
      category,
      key,
    );
  }

  late final _wire_get__method__LocalStorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get__method__LocalStore');
  late final _wire_get__method__LocalStore = _wire_get__method__LocalStorePtr.asFunction<
      void Function(int, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_clear__method__LocalStore(
    int port_,
    ffi.Pointer<wire_LocalStore> that,
    ffi.Pointer<wire_uint_8_list> category,
  ) {
    return _wire_clear__method__LocalStore(
      port_,
      that,
      category,
    );
  }

  late final _wire_clear__method__LocalStorePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_clear__method__LocalStore');
  late final _wire_clear__method__LocalStore = _wire_clear__method__LocalStorePtr
      .asFunction<void Function(int, ffi.Pointer<wire_LocalStore>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_new__static_method__AnnixPlayer() {
    return _wire_new__static_method__AnnixPlayer();
  }

  late final _wire_new__static_method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_new__static_method__AnnixPlayer');
  late final _wire_new__static_method__AnnixPlayer =
      _wire_new__static_method__AnnixPlayerPtr.asFunction<WireSyncReturn Function()>();

  void wire_play__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_play__method__AnnixPlayer(
      port_,
      that,
    );
  }

  late final _wire_play__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_play__method__AnnixPlayer');
  late final _wire_play__method__AnnixPlayer =
      _wire_play__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>)>();

  void wire_pause__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_pause__method__AnnixPlayer(
      port_,
      that,
    );
  }

  late final _wire_pause__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_pause__method__AnnixPlayer');
  late final _wire_pause__method__AnnixPlayer =
      _wire_pause__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>)>();

  void wire_open_file__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_open_file__method__AnnixPlayer(
      port_,
      that,
      path,
    );
  }

  late final _wire_open_file__method__AnnixPlayerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_open_file__method__AnnixPlayer');
  late final _wire_open_file__method__AnnixPlayer = _wire_open_file__method__AnnixPlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_volume__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
    double volume,
  ) {
    return _wire_set_volume__method__AnnixPlayer(
      port_,
      that,
      volume,
    );
  }

  late final _wire_set_volume__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>, ffi.Float)>>(
          'wire_set_volume__method__AnnixPlayer');
  late final _wire_set_volume__method__AnnixPlayer =
      _wire_set_volume__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>, double)>();

  void wire_stop__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_stop__method__AnnixPlayer(
      port_,
      that,
    );
  }

  late final _wire_stop__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_stop__method__AnnixPlayer');
  late final _wire_stop__method__AnnixPlayer =
      _wire_stop__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>)>();

  void wire_seek__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
    int position,
  ) {
    return _wire_seek__method__AnnixPlayer(
      port_,
      that,
      position,
    );
  }

  late final _wire_seek__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>, ffi.Uint64)>>(
          'wire_seek__method__AnnixPlayer');
  late final _wire_seek__method__AnnixPlayer =
      _wire_seek__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>, int)>();

  WireSyncReturn wire_is_playing__method__AnnixPlayer(
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_is_playing__method__AnnixPlayer(
      that,
    );
  }

  late final _wire_is_playing__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_is_playing__method__AnnixPlayer');
  late final _wire_is_playing__method__AnnixPlayer =
      _wire_is_playing__method__AnnixPlayerPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_AnnixPlayer>)>();

  void wire_player_state_stream__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_player_state_stream__method__AnnixPlayer(
      port_,
      that,
    );
  }

  late final _wire_player_state_stream__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_player_state_stream__method__AnnixPlayer');
  late final _wire_player_state_stream__method__AnnixPlayer =
      _wire_player_state_stream__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>)>();

  void wire_progress_stream__method__AnnixPlayer(
    int port_,
    ffi.Pointer<wire_AnnixPlayer> that,
  ) {
    return _wire_progress_stream__method__AnnixPlayer(
      port_,
      that,
    );
  }

  late final _wire_progress_stream__method__AnnixPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_AnnixPlayer>)>>(
          'wire_progress_stream__method__AnnixPlayer');
  late final _wire_progress_stream__method__AnnixPlayer =
      _wire_progress_stream__method__AnnixPlayerPtr.asFunction<void Function(int, ffi.Pointer<wire_AnnixPlayer>)>();

  wire_MutexConnection new_MutexConnection() {
    return _new_MutexConnection();
  }

  late final _new_MutexConnectionPtr =
      _lookup<ffi.NativeFunction<wire_MutexConnection Function()>>('new_MutexConnection');
  late final _new_MutexConnection = _new_MutexConnectionPtr.asFunction<wire_MutexConnection Function()>();

  wire_MutexRepoDatabaseRead new_MutexRepoDatabaseRead() {
    return _new_MutexRepoDatabaseRead();
  }

  late final _new_MutexRepoDatabaseReadPtr =
      _lookup<ffi.NativeFunction<wire_MutexRepoDatabaseRead Function()>>('new_MutexRepoDatabaseRead');
  late final _new_MutexRepoDatabaseRead =
      _new_MutexRepoDatabaseReadPtr.asFunction<wire_MutexRepoDatabaseRead Function()>();

  wire_Player new_Player() {
    return _new_Player();
  }

  late final _new_PlayerPtr = _lookup<ffi.NativeFunction<wire_Player Function()>>('new_Player');
  late final _new_Player = _new_PlayerPtr.asFunction<wire_Player Function()>();

  wire_StreamWrapperPlayerStateEvent new_StreamWrapperPlayerStateEvent() {
    return _new_StreamWrapperPlayerStateEvent();
  }

  late final _new_StreamWrapperPlayerStateEventPtr =
      _lookup<ffi.NativeFunction<wire_StreamWrapperPlayerStateEvent Function()>>('new_StreamWrapperPlayerStateEvent');
  late final _new_StreamWrapperPlayerStateEvent =
      _new_StreamWrapperPlayerStateEventPtr.asFunction<wire_StreamWrapperPlayerStateEvent Function()>();

  wire_StreamWrapperProgressState new_StreamWrapperProgressState() {
    return _new_StreamWrapperProgressState();
  }

  late final _new_StreamWrapperProgressStatePtr =
      _lookup<ffi.NativeFunction<wire_StreamWrapperProgressState Function()>>('new_StreamWrapperProgressState');
  late final _new_StreamWrapperProgressState =
      _new_StreamWrapperProgressStatePtr.asFunction<wire_StreamWrapperProgressState Function()>();

  ffi.Pointer<wire_AnnixPlayer> new_box_autoadd_annix_player_0() {
    return _new_box_autoadd_annix_player_0();
  }

  late final _new_box_autoadd_annix_player_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AnnixPlayer> Function()>>('new_box_autoadd_annix_player_0');
  late final _new_box_autoadd_annix_player_0 =
      _new_box_autoadd_annix_player_0Ptr.asFunction<ffi.Pointer<wire_AnnixPlayer> Function()>();

  ffi.Pointer<wire_LocalDb> new_box_autoadd_local_db_0() {
    return _new_box_autoadd_local_db_0();
  }

  late final _new_box_autoadd_local_db_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalDb> Function()>>('new_box_autoadd_local_db_0');
  late final _new_box_autoadd_local_db_0 =
      _new_box_autoadd_local_db_0Ptr.asFunction<ffi.Pointer<wire_LocalDb> Function()>();

  ffi.Pointer<wire_LocalStore> new_box_autoadd_local_store_0() {
    return _new_box_autoadd_local_store_0();
  }

  late final _new_box_autoadd_local_store_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalStore> Function()>>('new_box_autoadd_local_store_0');
  late final _new_box_autoadd_local_store_0 =
      _new_box_autoadd_local_store_0Ptr.asFunction<ffi.Pointer<wire_LocalStore> Function()>();

  ffi.Pointer<wire_NativePreferenceStore> new_box_autoadd_native_preference_store_0() {
    return _new_box_autoadd_native_preference_store_0();
  }

  late final _new_box_autoadd_native_preference_store_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NativePreferenceStore> Function()>>(
          'new_box_autoadd_native_preference_store_0');
  late final _new_box_autoadd_native_preference_store_0 =
      _new_box_autoadd_native_preference_store_0Ptr.asFunction<ffi.Pointer<wire_NativePreferenceStore> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_MutexConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexConnection(
      ptr,
    );
  }

  late final _drop_opaque_MutexConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexConnection');
  late final _drop_opaque_MutexConnection =
      _drop_opaque_MutexConnectionPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexConnection(
      ptr,
    );
  }

  late final _share_opaque_MutexConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_MutexConnection');
  late final _share_opaque_MutexConnection =
      _share_opaque_MutexConnectionPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexRepoDatabaseRead(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexRepoDatabaseRead(
      ptr,
    );
  }

  late final _drop_opaque_MutexRepoDatabaseReadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexRepoDatabaseRead');
  late final _drop_opaque_MutexRepoDatabaseRead =
      _drop_opaque_MutexRepoDatabaseReadPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexRepoDatabaseRead(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexRepoDatabaseRead(
      ptr,
    );
  }

  late final _share_opaque_MutexRepoDatabaseReadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_MutexRepoDatabaseRead');
  late final _share_opaque_MutexRepoDatabaseRead =
      _share_opaque_MutexRepoDatabaseReadPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Player(
      ptr,
    );
  }

  late final _drop_opaque_PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_Player');
  late final _drop_opaque_Player = _drop_opaque_PlayerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Player(
      ptr,
    );
  }

  late final _share_opaque_PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_Player');
  late final _share_opaque_Player =
      _share_opaque_PlayerPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_StreamWrapperPlayerStateEvent(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_StreamWrapperPlayerStateEvent(
      ptr,
    );
  }

  late final _drop_opaque_StreamWrapperPlayerStateEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_StreamWrapperPlayerStateEvent');
  late final _drop_opaque_StreamWrapperPlayerStateEvent =
      _drop_opaque_StreamWrapperPlayerStateEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_StreamWrapperPlayerStateEvent(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_StreamWrapperPlayerStateEvent(
      ptr,
    );
  }

  late final _share_opaque_StreamWrapperPlayerStateEventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_StreamWrapperPlayerStateEvent');
  late final _share_opaque_StreamWrapperPlayerStateEvent = _share_opaque_StreamWrapperPlayerStateEventPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_StreamWrapperProgressState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_StreamWrapperProgressState(
      ptr,
    );
  }

  late final _drop_opaque_StreamWrapperProgressStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_StreamWrapperProgressState');
  late final _drop_opaque_StreamWrapperProgressState =
      _drop_opaque_StreamWrapperProgressStatePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_StreamWrapperProgressState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_StreamWrapperProgressState(
      ptr,
    );
  }

  late final _share_opaque_StreamWrapperProgressStatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_StreamWrapperProgressState');
  late final _share_opaque_StreamWrapperProgressState =
      _share_opaque_StreamWrapperProgressStatePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MutexConnection extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_NativePreferenceStore extends ffi.Struct {
  external wire_MutexConnection conn;
}

final class wire_MutexRepoDatabaseRead extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_LocalDb extends ffi.Struct {
  external wire_MutexRepoDatabaseRead repo;
}

final class wire_LocalStore extends ffi.Struct {
  external wire_MutexConnection conn;
}

final class wire_Player extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_StreamWrapperPlayerStateEvent extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_StreamWrapperProgressState extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_AnnixPlayer extends ffi.Struct {
  external wire_Player player;

  external wire_StreamWrapperPlayerStateEvent _state;

  external wire_StreamWrapperProgressState _progress;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
