// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class ApiNetwork {
  Future<void> updateNetworkStatus({required bool isOnline, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateNetworkStatusConstMeta;

  Future<bool> isOnlineMethodNetworkStatus({required NetworkStatus that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsOnlineMethodNetworkStatusConstMeta;
}

enum NetworkStatus {
  online,
  offline,
}

class ApiNetworkImpl implements ApiNetwork {
  final ApiNetworkPlatform _platform;
  factory ApiNetworkImpl(ExternalLibrary dylib) => ApiNetworkImpl.raw(ApiNetworkPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ApiNetworkImpl.wasm(FutureOr<WasmModule> module) => ApiNetworkImpl(module as ExternalLibrary);
  ApiNetworkImpl.raw(this._platform);
  Future<void> updateNetworkStatus({required bool isOnline, dynamic hint}) {
    var arg0 = isOnline;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_network_status(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateNetworkStatusConstMeta,
      argValues: [isOnline],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateNetworkStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_network_status",
        argNames: ["isOnline"],
      );

  Future<bool> isOnlineMethodNetworkStatus({required NetworkStatus that, dynamic hint}) {
    var arg0 = api2wire_network_status(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_online__method__NetworkStatus(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsOnlineMethodNetworkStatusConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsOnlineMethodNetworkStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_online__method__NetworkStatus",
        argNames: ["that"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network_status(NetworkStatus raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer

class ApiNetworkPlatform extends FlutterRustBridgeBase<ApiNetworkWire> {
  ApiNetworkPlatform(ffi.DynamicLibrary dylib) : super(ApiNetworkWire(dylib));

// Section: api2wire

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class ApiNetworkWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiNetworkWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiNetworkWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_update_network_status(
    int port_,
    bool is_online,
  ) {
    return _wire_update_network_status(
      port_,
      is_online,
    );
  }

  late final _wire_update_network_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>('wire_update_network_status');
  late final _wire_update_network_status = _wire_update_network_statusPtr.asFunction<void Function(int, bool)>();

  void wire_is_online__method__NetworkStatus(
    int port_,
    int that,
  ) {
    return _wire_is_online__method__NetworkStatus(
      port_,
      that,
    );
  }

  late final _wire_is_online__method__NetworkStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_is_online__method__NetworkStatus');
  late final _wire_is_online__method__NetworkStatus =
      _wire_is_online__method__NetworkStatusPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_NativePreferenceStore> new_box_autoadd_native_preference_store_1() {
    return _new_box_autoadd_native_preference_store_1();
  }

  late final _new_box_autoadd_native_preference_store_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NativePreferenceStore> Function()>>(
          'new_box_autoadd_native_preference_store_1');
  late final _new_box_autoadd_native_preference_store_1 =
      _new_box_autoadd_native_preference_store_1Ptr.asFunction<ffi.Pointer<wire_NativePreferenceStore> Function()>();

  ffi.Pointer<wire_LocalDb> new_box_autoadd_local_db_0() {
    return _new_box_autoadd_local_db_0();
  }

  late final _new_box_autoadd_local_db_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalDb> Function()>>('new_box_autoadd_local_db_0');
  late final _new_box_autoadd_local_db_0 =
      _new_box_autoadd_local_db_0Ptr.asFunction<ffi.Pointer<wire_LocalDb> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  ffi.Pointer<wire_LocalStore> new_box_autoadd_local_store_2() {
    return _new_box_autoadd_local_store_2();
  }

  late final _new_box_autoadd_local_store_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalStore> Function()>>('new_box_autoadd_local_store_2');
  late final _new_box_autoadd_local_store_2 =
      _new_box_autoadd_local_store_2Ptr.asFunction<ffi.Pointer<wire_LocalStore> Function()>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_MutexDummy1Connection extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_NativePreferenceStore extends ffi.Struct {
  external wire_MutexDummy1Connection conn;
}

final class wire_MutexRepoDatabaseRead extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_LocalDb extends ffi.Struct {
  external wire_MutexRepoDatabaseRead repo;
}

final class wire_MutexConnection extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_LocalStore extends ffi.Struct {
  external wire_MutexConnection conn;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
