-- tables

CREATE TABLE playlist (
    -- local properties
    "id"              INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    "name"            TEXT NOT NULL,
    "cover"           TEXT,
    "description"     TEXT,

    -- remote properties
    "remote_id"       TEXT,            -- remote id (string), should be unique
    "owner"           TEXT,            -- owner id of the playlist
    "public"          BOOL,            -- whether the playlist is public
    "last_modified"   INT,             -- last modified timestamp of remote playlist
    "has_items"       BOOL NOT NULL    -- whether playlist items has synced with remote
                                       -- if has_items == false, we should fetch playlist detail from remote
);

CREATE TABLE playlist_item (
    "id"              INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    "playlist_id"     INT NOT NULL,

    "type"            TEXT NOT NULL DEFAULT 'normal' CHECK ("type" IN ('normal', 'dummy', 'album')),
    "description"     TEXT,
    "info"            TEXT NOT NULL,

    "remote_id"       TEXT,
    "order"           INT NOT NULL,

    FOREIGN KEY("playlist_id") REFERENCES "playlist"("id")
);

CREATE TABLE favorites (
    "id"              INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    "album_id"        TEXT NOT NULL,
    "disc_id"         INT NOT NULL,
    "track_id"        INT NOT NULL,

    -- some metadata
    "title"           TEXT,
    "artist"          TEXT,
    "album_title"     TEXT,
    "type"            TEXT NOT NULL DEFAULT 'normal' CHECK ("type" IN ('normal', 'instrumental', 'absolute', 'drama', 'radio', 'vocal'))
);

CREATE UNIQUE INDEX IF NOT EXISTS "favorites_index" ON favorites (
  "album_id",
  "disc_id",
  "track_id"
);

playlistItems: SELECT * FROM playlist_item WHERE playlist_id = ? ORDER BY "order";

isTrackFavorite: SELECT EXISTS (SELECT 1 FROM favorites WHERE album_id = ? AND disc_id = ? AND track_id = ?);