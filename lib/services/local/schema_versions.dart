import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart';// ignore_for_file: type=lint,unused_import
// GENERATED BY drift_dev, DO NOT MODIFY.
final class _S2 extends i0.VersionedSchema{
_S2({required super.database}): super(version: 2);
@override late final List<i1.DatabaseSchemaEntity> entities = [annivUser,playlist,playlistItem,localFavoriteTracks,localFavoriteTracksIndex,localFavoriteAlbums,localAnnilServers,localAnnilCaches,localAnnilAlbums,playbackRecords,];late final Shape0 annivUser = Shape0(source: i0.VersionedTable(entityName: 'anniv_user',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_1,_column_2,_column_3,],attachedDatabase: database,), alias: null);late final Shape1 playlist = Shape1(source: i0.VersionedTable(entityName: 'playlist',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_4,_column_5,_column_6,_column_7,_column_8,_column_9,_column_10,_column_11,],attachedDatabase: database,), alias: null);late final Shape2 playlistItem = Shape2(source: i0.VersionedTable(entityName: 'playlist_item',withoutRowId: false,isStrict: false,tableConstraints: ['FOREIGN KEY(playlist_id)REFERENCES playlist(id)',],columns: [_column_0,_column_12,_column_13,_column_6,_column_14,_column_7,_column_15,],attachedDatabase: database,), alias: null);late final Shape3 localFavoriteTracks = Shape3(source: i0.VersionedTable(entityName: 'local_favorite_tracks',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_16,_column_17,_column_18,_column_19,_column_20,_column_21,_column_22,],attachedDatabase: database,), alias: null);final i1.Index localFavoriteTracksIndex = i1.Index('local_favorite_tracks_index', 'CREATE UNIQUE INDEX IF NOT EXISTS local_favorite_tracks_index ON local_favorite_tracks (album_id, disc_id, track_id)')
;late final Shape4 localFavoriteAlbums = Shape4(source: i0.VersionedTable(entityName: 'local_favorite_albums',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_16,],attachedDatabase: database,), alias: null);late final Shape5 localAnnilServers = Shape5(source: i0.VersionedTable(entityName: 'local_annil_servers',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_7,_column_4,_column_23,_column_24,_column_25,],attachedDatabase: database,), alias: null);late final Shape6 localAnnilCaches = Shape6(source: i0.VersionedTable(entityName: 'local_annil_caches',withoutRowId: false,isStrict: false,tableConstraints: ['FOREIGN KEY(annil_id)REFERENCES local_annil_servers(id)',],columns: [_column_26,_column_27,_column_28,],attachedDatabase: database,), alias: null);late final Shape7 localAnnilAlbums = Shape7(source: i0.VersionedTable(entityName: 'local_annil_albums',withoutRowId: false,isStrict: false,tableConstraints: ['FOREIGN KEY(annil_id)REFERENCES local_annil_servers(id)',],columns: [_column_0,_column_29,_column_16,],attachedDatabase: database,), alias: null);late final Shape8 playbackRecords = Shape8(source: i0.VersionedTable(entityName: 'playback_records',withoutRowId: false,isStrict: false,tableConstraints: [],columns: [_column_0,_column_16,_column_17,_column_18,_column_30,_column_31,],attachedDatabase: database,), alias: null);}
class Shape0 extends i0.VersionedTable{
Shape0({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get userId => columnsByName['user_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get nickname => columnsByName['nickname']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get avatar => columnsByName['avatar']! as i1.GeneratedColumn<String>;
}
i1.GeneratedColumn<int> _column_0(String aliasedName) => i1.GeneratedColumn<int>('id', aliasedName, false, hasAutoIncrement: true, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL PRIMARY KEY AUTOINCREMENT');
i1.GeneratedColumn<String> _column_1(String aliasedName) => i1.GeneratedColumn<String>('user_id', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_2(String aliasedName) => i1.GeneratedColumn<String>('nickname', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_3(String aliasedName) => i1.GeneratedColumn<String>('avatar', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
class Shape1 extends i0.VersionedTable{
Shape1({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get name => columnsByName['name']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get cover => columnsByName['cover']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get description => columnsByName['description']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get remoteId => columnsByName['remote_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get owner => columnsByName['owner']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<bool> get public => columnsByName['public']! as i1.GeneratedColumn<bool>;
i1.GeneratedColumn<int> get lastModified => columnsByName['last_modified']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<bool> get hasItems => columnsByName['has_items']! as i1.GeneratedColumn<bool>;
}
i1.GeneratedColumn<String> _column_4(String aliasedName) => i1.GeneratedColumn<String>('name', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_5(String aliasedName) => i1.GeneratedColumn<String>('cover', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_6(String aliasedName) => i1.GeneratedColumn<String>('description', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_7(String aliasedName) => i1.GeneratedColumn<String>('remote_id', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_8(String aliasedName) => i1.GeneratedColumn<String>('owner', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<bool> _column_9(String aliasedName) => i1.GeneratedColumn<bool>('public', aliasedName, true, type: i1.DriftSqlType.bool, $customConstraints: '');
i1.GeneratedColumn<int> _column_10(String aliasedName) => i1.GeneratedColumn<int>('last_modified', aliasedName, true, type: i1.DriftSqlType.int, $customConstraints: '');
i1.GeneratedColumn<bool> _column_11(String aliasedName) => i1.GeneratedColumn<bool>('has_items', aliasedName, false, type: i1.DriftSqlType.bool, $customConstraints: 'NOT NULL');
class Shape2 extends i0.VersionedTable{
Shape2({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<int> get playlistId => columnsByName['playlist_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get type => columnsByName['type']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get description => columnsByName['description']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get info => columnsByName['info']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get remoteId => columnsByName['remote_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<int> get order => columnsByName['order']! as i1.GeneratedColumn<int>;
}
i1.GeneratedColumn<int> _column_12(String aliasedName) => i1.GeneratedColumn<int>('playlist_id', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_13(String aliasedName) => i1.GeneratedColumn<String>('type', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL DEFAULT \'normal\' CHECK (type IN (\'normal\', \'dummy\', \'album\'))', defaultValue: const CustomExpression('\'normal\''));
i1.GeneratedColumn<String> _column_14(String aliasedName) => i1.GeneratedColumn<String>('info', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<int> _column_15(String aliasedName) => i1.GeneratedColumn<int>('order', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
class Shape3 extends i0.VersionedTable{
Shape3({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get albumId => columnsByName['album_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<int> get discId => columnsByName['disc_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<int> get trackId => columnsByName['track_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get title => columnsByName['title']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get artist => columnsByName['artist']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get albumTitle => columnsByName['album_title']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get type => columnsByName['type']! as i1.GeneratedColumn<String>;
}
i1.GeneratedColumn<String> _column_16(String aliasedName) => i1.GeneratedColumn<String>('album_id', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<int> _column_17(String aliasedName) => i1.GeneratedColumn<int>('disc_id', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<int> _column_18(String aliasedName) => i1.GeneratedColumn<int>('track_id', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_19(String aliasedName) => i1.GeneratedColumn<String>('title', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_20(String aliasedName) => i1.GeneratedColumn<String>('artist', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_21(String aliasedName) => i1.GeneratedColumn<String>('album_title', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_22(String aliasedName) => i1.GeneratedColumn<String>('type', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL DEFAULT \'normal\' CHECK (type IN (\'normal\', \'instrumental\', \'absolute\', \'drama\', \'radio\', \'vocal\'))', defaultValue: const CustomExpression('\'normal\''));
class Shape4 extends i0.VersionedTable{
Shape4({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get albumId => columnsByName['album_id']! as i1.GeneratedColumn<String>;
}
class Shape5 extends i0.VersionedTable{
Shape5({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get remoteId => columnsByName['remote_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get name => columnsByName['name']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get url => columnsByName['url']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<String> get token => columnsByName['token']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<int> get priority => columnsByName['priority']! as i1.GeneratedColumn<int>;
}
i1.GeneratedColumn<String> _column_23(String aliasedName) => i1.GeneratedColumn<String>('url', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_24(String aliasedName) => i1.GeneratedColumn<String>('token', aliasedName, false, type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<int> _column_25(String aliasedName) => i1.GeneratedColumn<int>('priority', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
class Shape6 extends i0.VersionedTable{
Shape6({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get annilId => columnsByName['annil_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get etag => columnsByName['etag']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<int> get lastUpdate => columnsByName['last_update']! as i1.GeneratedColumn<int>;
}
i1.GeneratedColumn<int> _column_26(String aliasedName) => i1.GeneratedColumn<int>('annil_id', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL PRIMARY KEY');
i1.GeneratedColumn<String> _column_27(String aliasedName) => i1.GeneratedColumn<String>('etag', aliasedName, true, type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<int> _column_28(String aliasedName) => i1.GeneratedColumn<int>('last_update', aliasedName, true, type: i1.DriftSqlType.int, $customConstraints: '');
class Shape7 extends i0.VersionedTable{
Shape7({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<int> get annilId => columnsByName['annil_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get albumId => columnsByName['album_id']! as i1.GeneratedColumn<String>;
}
i1.GeneratedColumn<int> _column_29(String aliasedName) => i1.GeneratedColumn<int>('annil_id', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
class Shape8 extends i0.VersionedTable{
Shape8({required super.source, required super.alias}) : super.aliased();
i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<String> get albumId => columnsByName['album_id']! as i1.GeneratedColumn<String>;
i1.GeneratedColumn<int> get discId => columnsByName['disc_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<int> get trackId => columnsByName['track_id']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<int> get at => columnsByName['at']! as i1.GeneratedColumn<int>;
i1.GeneratedColumn<bool> get locked => columnsByName['locked']! as i1.GeneratedColumn<bool>;
}
i1.GeneratedColumn<int> _column_30(String aliasedName) => i1.GeneratedColumn<int>('at', aliasedName, false, type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<bool> _column_31(String aliasedName) => i1.GeneratedColumn<bool>('locked', aliasedName, false, type: i1.DriftSqlType.bool, $customConstraints: 'NOT NULL');
i0.MigrationStepWithVersion migrationSteps({required Future<void> Function(i1.Migrator m, _S2 schema)from1To2,
}) {
return (currentVersion, database) async {
switch (currentVersion) {
case 1:
final schema = _S2(database: database);final migrator = i1.Migrator(database, schema);
await from1To2(migrator, schema);
return 2;
default: throw ArgumentError.value('Unknown migration from $currentVersion');
}
};
}
i1.OnUpgrade stepByStep({required Future<void> Function(i1.Migrator m, _S2 schema)from1To2,
}) => 
i0.VersionedSchema.stepByStepHelper(step: migrationSteps(from1To2: from1To2,
));
