import 'package:annix/native/api/simple.dart';
import 'package:annix/services/annil/cover.dart';
import 'package:annix/services/font.dart';
import 'package:annix/ui/route/page.dart';
import 'package:annix/ui/route/route.dart';
import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

class AnnixTheme extends ChangeNotifier {
  final Ref ref;
  final _cache = {};

  AnnixTheme(this.ref)
      : _primaryColor = Colors.indigo,
        _primaryScheme = ColorScheme.fromSeed(seedColor: Colors.indigo),
        _primaryDarkScheme = ColorScheme.fromSeed(
            seedColor: Colors.indigo, brightness: Brightness.dark),
        _themeMode = ThemeMode.system;

  // main theme generated by now-playing cover
  Color _primaryColor;
  ColorScheme _primaryScheme;
  ColorScheme _primaryDarkScheme;

  // temporary theme generated per-page
  Color? _temporaryPrimaryColor;
  ColorScheme? _temporaryPrimaryScheme;
  ColorScheme? _temporaryPrimaryDarkScheme;

  ThemeData get theme => ThemeData(
        useMaterial3: true,
        brightness: Brightness.light,
        fontFamily: FontService.getFontFamilyName(),
        colorScheme: _temporaryPrimaryScheme ?? _primaryScheme,
      );
  ThemeData get darkTheme => ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        fontFamily: FontService.getFontFamilyName(),
        colorScheme: _temporaryPrimaryDarkScheme ?? _primaryDarkScheme,
      );

  ThemeMode _themeMode;
  ThemeMode get themeMode => _themeMode;

  final List<String> _themeStack = [];
  String? get activeTemporaryTheme {
    if (_themeStack.isEmpty) {
      return null;
    }
    return _themeStack.last;
  }

  void pushTemporaryTheme(final String albumId) async {
    if (!_cache.containsKey(albumId)) {
      _cache[albumId] = _getSchemeFromCover(albumId);
    }

    _themeStack.add(albumId);
    final [scheme, darkScheme] = await _cache[albumId];
    if (activeTemporaryTheme == albumId && _temporaryPrimaryScheme != scheme ||
        _temporaryPrimaryDarkScheme != darkScheme) {
      WidgetsBinding.instance.addPostFrameCallback((final _) {
        _setTemporaryScheme(scheme, darkScheme);
      });
    }
  }

  void popTemporaryTheme() {
    if (_temporaryPrimaryColor != null) {
      final oldTemporaryPrimaryColor = _temporaryPrimaryColor;
      _temporaryPrimaryColor = null;
      _temporaryPrimaryScheme = null;
      _temporaryPrimaryDarkScheme = null;
      _themeStack.clear();

      if (oldTemporaryPrimaryColor != _primaryColor) {
        notifyListeners();
      }
    }
  }

  void setImageProvider(String albumId) async {
    final [scheme, darkScheme] = await _getSchemeFromCover(albumId);
    _setScheme(scheme, darkScheme);
  }

  Future<List<ColorScheme>> _getSchemeFromCover(String albumId) async {
    final proxy = ref.read(coverProxyProvider);
    final image = await proxy.getCoverImage(albumId: albumId);
    final seed = getThemeColor(path: image!.path);
    final scheme = ColorScheme.fromSeed(seedColor: Color(seed));
    final darkScheme = ColorScheme.fromSeed(
        seedColor: Color(seed), brightness: Brightness.dark);

    return [scheme, darkScheme];
  }

  void _setTemporaryScheme(
      final ColorScheme scheme, final ColorScheme darkScheme) {
    _temporaryPrimaryColor = scheme.primary;
    _temporaryPrimaryScheme = scheme;
    _temporaryPrimaryDarkScheme = darkScheme;
    notifyListeners();
  }

  void _setScheme(final ColorScheme scheme, final ColorScheme darkScheme) {
    _primaryColor = scheme.primary;
    _primaryScheme = scheme;
    _primaryDarkScheme = darkScheme;
    notifyListeners();
  }

  void setThemeMode(final ThemeMode mode) {
    if (mode != _themeMode) {
      _themeMode = mode;
      notifyListeners();
    }
  }

  void updateFontFamily() {
    notifyListeners();
  }
}

class ThemePopObserver extends NavigatorObserver {
  final AnnixTheme theme;

  ThemePopObserver(this.theme);

  @override
  void didPush(Route route, Route? previousRoute) {
    // TODO: implement didPush
    super.didPush(route, previousRoute);
  }

  @override
  didPop(final Route<dynamic> route, final Route<dynamic>? previousRoute) {
    if (route is AnnixRoute && route.settings is AnnixPage) {
      // if this route had pushed a theme, them pop it
      if (['/album', '/playlist'].contains(route.settings.name)) {
        WidgetsBinding.instance.addPostFrameCallback((final _) {
          theme.popTemporaryTheme();
        });
      }
    }
  }
}
