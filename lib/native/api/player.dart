// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `update_player_state_stream`, `update_progress_stream`

void initLogger({required String path}) =>
    RustLib.instance.api.crateApiPlayerInitLogger(path: path);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnnixPlayer>>
abstract class AnnixPlayer implements RustOpaqueInterface {
  Future<void> addProvider(
      {required String url, required String auth, required int priority});

  Future<void> clearProvider();

  bool isPlaying();

  factory AnnixPlayer({required String cachePath}) =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerNew(cachePath: cachePath);

  Future<void> pause();

  Future<void> play();

  Stream<PlayerStateEvent> playerStateStream();

  Stream<ProgressState> progressStream();

  Future<void> seek({required int position});

  Future<void> setTrack(
      {required String identifier,
      required AudioQuality quality,
      required bool opus});

  Future<void> setVolume({required double volume});

  Future<void> stop();
}

enum AudioQuality {
  low,
  medium,
  high,
  lossless,
  ;
}

enum PlayerStateEvent {
  /// Started playing
  play,

  /// Paused
  pause,

  /// Stopped playing
  stop,
  ;
}

class ProgressState {
  final int position;
  final int duration;

  const ProgressState({
    required this.position,
    required this.duration,
  });

  @override
  int get hashCode => position.hashCode ^ duration.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProgressState &&
          runtimeType == other.runtimeType &&
          position == other.position &&
          duration == other.duration;
}
