// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/network.dart';
import 'api/player.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -678822201;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_annix',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<bool> crateApiNetworkNetworkStatusIsOnline(
      {required NetworkStatus that});

  Future<void> crateApiNetworkUpdateNetworkStatus({required bool isOnline});

  Future<void> crateApiPlayerAnnixPlayerAddProvider(
      {required AnnixPlayer that,
      required String url,
      required String auth,
      required int priority});

  Future<void> crateApiPlayerAnnixPlayerClearProvider(
      {required AnnixPlayer that});

  bool crateApiPlayerAnnixPlayerIsPlaying({required AnnixPlayer that});

  AnnixPlayer crateApiPlayerAnnixPlayerNew({required String cachePath});

  Future<void> crateApiPlayerAnnixPlayerPause({required AnnixPlayer that});

  Future<void> crateApiPlayerAnnixPlayerPlay({required AnnixPlayer that});

  Stream<PlayerStateEvent> crateApiPlayerAnnixPlayerPlayerStateStream(
      {required AnnixPlayer that});

  Stream<ProgressState> crateApiPlayerAnnixPlayerProgressStream(
      {required AnnixPlayer that});

  Future<void> crateApiPlayerAnnixPlayerSeek(
      {required AnnixPlayer that, required int position});

  Future<void> crateApiPlayerAnnixPlayerSetTrack(
      {required AnnixPlayer that,
      required String identifier,
      required AudioQuality quality,
      required bool opus});

  Future<void> crateApiPlayerAnnixPlayerSetVolume(
      {required AnnixPlayer that, required double volume});

  Future<void> crateApiPlayerAnnixPlayerStop({required AnnixPlayer that});

  void crateApiPlayerInitLogger({required String path});

  int crateApiSimpleGetThemeColor({required String path});

  Future<String?> crateApiSimpleLocalDbGetAlbum(
      {required LocalDb that, required UuidValue albumId});

  Future<List<UuidValue>> crateApiSimpleLocalDbGetAlbumsByTag(
      {required LocalDb that, required String tag, required bool recursive});

  Future<List<TagItem>> crateApiSimpleLocalDbGetTags({required LocalDb that});

  Future<LocalDb> crateApiSimpleLocalDbNew({required String path});

  Future<void> crateApiSimpleLocalStoreClear(
      {required LocalStore that, String? category});

  Future<String?> crateApiSimpleLocalStoreGet(
      {required LocalStore that,
      required String category,
      required String key});

  Future<void> crateApiSimpleLocalStoreInsert(
      {required LocalStore that,
      required String category,
      required String key,
      required String value});

  LocalStore crateApiSimpleLocalStoreNew({required String root});

  String? crateApiSimpleNativePreferenceStoreGet(
      {required NativePreferenceStore that, required String key});

  NativePreferenceStore crateApiSimpleNativePreferenceStoreNew(
      {required String root});

  void crateApiSimpleNativePreferenceStoreRemove(
      {required NativePreferenceStore that, required String key});

  void crateApiSimpleNativePreferenceStoreRemovePrefix(
      {required NativePreferenceStore that, required String prefix});

  void crateApiSimpleNativePreferenceStoreSet(
      {required NativePreferenceStore that,
      required String key,
      required String value});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexConnection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexConnection;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexConnectionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexRepoDatabaseRead;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexRepoDatabaseRead;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexRepoDatabaseReadPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnnixPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnnixPlayer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnnixPlayerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<bool> crateApiNetworkNetworkStatusIsOnline(
      {required NetworkStatus that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network_status(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNetworkNetworkStatusIsOnlineConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkNetworkStatusIsOnlineConstMeta =>
      const TaskConstMeta(
        debugName: "network_status_is_online",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiNetworkUpdateNetworkStatus({required bool isOnline}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(isOnline, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNetworkUpdateNetworkStatusConstMeta,
      argValues: [isOnline],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNetworkUpdateNetworkStatusConstMeta =>
      const TaskConstMeta(
        debugName: "update_network_status",
        argNames: ["isOnline"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerAddProvider(
      {required AnnixPlayer that,
      required String url,
      required String auth,
      required int priority}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_String(url, serializer);
        sse_encode_String(auth, serializer);
        sse_encode_i_32(priority, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerAddProviderConstMeta,
      argValues: [that, url, auth, priority],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerAddProviderConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_add_provider",
        argNames: ["that", "url", "auth", "priority"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerClearProvider(
      {required AnnixPlayer that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerClearProviderConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerClearProviderConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_clear_provider",
        argNames: ["that"],
      );

  @override
  bool crateApiPlayerAnnixPlayerIsPlaying({required AnnixPlayer that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerIsPlayingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerIsPlayingConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_is_playing",
        argNames: ["that"],
      );

  @override
  AnnixPlayer crateApiPlayerAnnixPlayerNew({required String cachePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(cachePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerNewConstMeta,
      argValues: [cachePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerNewConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_new",
        argNames: ["cachePath"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerPause({required AnnixPlayer that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerPauseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerPauseConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_pause",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerPlay({required AnnixPlayer that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerPlayConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerPlayConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_play",
        argNames: ["that"],
      );

  @override
  Stream<PlayerStateEvent> crateApiPlayerAnnixPlayerPlayerStateStream(
      {required AnnixPlayer that}) {
    final stream = RustStreamSink<PlayerStateEvent>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_StreamSink_player_state_event_Sse(stream, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerPlayerStateStreamConstMeta,
      argValues: [that, stream],
      apiImpl: this,
    )));
    return stream.stream;
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerPlayerStateStreamConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_player_state_stream",
        argNames: ["that", "stream"],
      );

  @override
  Stream<ProgressState> crateApiPlayerAnnixPlayerProgressStream(
      {required AnnixPlayer that}) {
    final stream = RustStreamSink<ProgressState>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_StreamSink_progress_state_Sse(stream, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerProgressStreamConstMeta,
      argValues: [that, stream],
      apiImpl: this,
    )));
    return stream.stream;
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerProgressStreamConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_progress_stream",
        argNames: ["that", "stream"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerSeek(
      {required AnnixPlayer that, required int position}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_u_32(position, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerSeekConstMeta,
      argValues: [that, position],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerSeekConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_seek",
        argNames: ["that", "position"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerSetTrack(
      {required AnnixPlayer that,
      required String identifier,
      required AudioQuality quality,
      required bool opus}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_String(identifier, serializer);
        sse_encode_audio_quality(quality, serializer);
        sse_encode_bool(opus, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerSetTrackConstMeta,
      argValues: [that, identifier, quality, opus],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerSetTrackConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_set_track",
        argNames: ["that", "identifier", "quality", "opus"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerSetVolume(
      {required AnnixPlayer that, required double volume}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        sse_encode_f_32(volume, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerSetVolumeConstMeta,
      argValues: [that, volume],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerSetVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_set_volume",
        argNames: ["that", "volume"],
      );

  @override
  Future<void> crateApiPlayerAnnixPlayerStop({required AnnixPlayer that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerAnnixPlayerStopConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerAnnixPlayerStopConstMeta =>
      const TaskConstMeta(
        debugName: "AnnixPlayer_stop",
        argNames: ["that"],
      );

  @override
  void crateApiPlayerInitLogger({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPlayerInitLoggerConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPlayerInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: ["path"],
      );

  @override
  int crateApiSimpleGetThemeColor({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetThemeColorConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetThemeColorConstMeta =>
      const TaskConstMeta(
        debugName: "get_theme_color",
        argNames: ["path"],
      );

  @override
  Future<String?> crateApiSimpleLocalDbGetAlbum(
      {required LocalDb that, required UuidValue albumId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_db(that, serializer);
        sse_encode_Uuid(albumId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalDbGetAlbumConstMeta,
      argValues: [that, albumId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalDbGetAlbumConstMeta =>
      const TaskConstMeta(
        debugName: "local_db_get_album",
        argNames: ["that", "albumId"],
      );

  @override
  Future<List<UuidValue>> crateApiSimpleLocalDbGetAlbumsByTag(
      {required LocalDb that, required String tag, required bool recursive}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_db(that, serializer);
        sse_encode_String(tag, serializer);
        sse_encode_bool(recursive, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalDbGetAlbumsByTagConstMeta,
      argValues: [that, tag, recursive],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalDbGetAlbumsByTagConstMeta =>
      const TaskConstMeta(
        debugName: "local_db_get_albums_by_tag",
        argNames: ["that", "tag", "recursive"],
      );

  @override
  Future<List<TagItem>> crateApiSimpleLocalDbGetTags({required LocalDb that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_db(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_tag_item,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalDbGetTagsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalDbGetTagsConstMeta =>
      const TaskConstMeta(
        debugName: "local_db_get_tags",
        argNames: ["that"],
      );

  @override
  Future<LocalDb> crateApiSimpleLocalDbNew({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_local_db,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalDbNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalDbNewConstMeta => const TaskConstMeta(
        debugName: "local_db_new",
        argNames: ["path"],
      );

  @override
  Future<void> crateApiSimpleLocalStoreClear(
      {required LocalStore that, String? category}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_store(that, serializer);
        sse_encode_opt_String(category, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalStoreClearConstMeta,
      argValues: [that, category],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalStoreClearConstMeta =>
      const TaskConstMeta(
        debugName: "local_store_clear",
        argNames: ["that", "category"],
      );

  @override
  Future<String?> crateApiSimpleLocalStoreGet(
      {required LocalStore that,
      required String category,
      required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_store(that, serializer);
        sse_encode_String(category, serializer);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalStoreGetConstMeta,
      argValues: [that, category, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalStoreGetConstMeta =>
      const TaskConstMeta(
        debugName: "local_store_get",
        argNames: ["that", "category", "key"],
      );

  @override
  Future<void> crateApiSimpleLocalStoreInsert(
      {required LocalStore that,
      required String category,
      required String key,
      required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_local_store(that, serializer);
        sse_encode_String(category, serializer);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalStoreInsertConstMeta,
      argValues: [that, category, key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalStoreInsertConstMeta =>
      const TaskConstMeta(
        debugName: "local_store_insert",
        argNames: ["that", "category", "key", "value"],
      );

  @override
  LocalStore crateApiSimpleLocalStoreNew({required String root}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(root, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_local_store,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLocalStoreNewConstMeta,
      argValues: [root],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLocalStoreNewConstMeta =>
      const TaskConstMeta(
        debugName: "local_store_new",
        argNames: ["root"],
      );

  @override
  String? crateApiSimpleNativePreferenceStoreGet(
      {required NativePreferenceStore that, required String key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_native_preference_store(that, serializer);
        sse_encode_String(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleNativePreferenceStoreGetConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleNativePreferenceStoreGetConstMeta =>
      const TaskConstMeta(
        debugName: "native_preference_store_get",
        argNames: ["that", "key"],
      );

  @override
  NativePreferenceStore crateApiSimpleNativePreferenceStoreNew(
      {required String root}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(root, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_native_preference_store,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleNativePreferenceStoreNewConstMeta,
      argValues: [root],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleNativePreferenceStoreNewConstMeta =>
      const TaskConstMeta(
        debugName: "native_preference_store_new",
        argNames: ["root"],
      );

  @override
  void crateApiSimpleNativePreferenceStoreRemove(
      {required NativePreferenceStore that, required String key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_native_preference_store(that, serializer);
        sse_encode_String(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleNativePreferenceStoreRemoveConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleNativePreferenceStoreRemoveConstMeta =>
      const TaskConstMeta(
        debugName: "native_preference_store_remove",
        argNames: ["that", "key"],
      );

  @override
  void crateApiSimpleNativePreferenceStoreRemovePrefix(
      {required NativePreferenceStore that, required String prefix}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_native_preference_store(that, serializer);
        sse_encode_String(prefix, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleNativePreferenceStoreRemovePrefixConstMeta,
      argValues: [that, prefix],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleNativePreferenceStoreRemovePrefixConstMeta =>
      const TaskConstMeta(
        debugName: "native_preference_store_remove_prefix",
        argNames: ["that", "prefix"],
      );

  @override
  void crateApiSimpleNativePreferenceStoreSet(
      {required NativePreferenceStore that,
      required String key,
      required String value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_native_preference_store(that, serializer);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleNativePreferenceStoreSetConstMeta,
      argValues: [that, key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleNativePreferenceStoreSetConstMeta =>
      const TaskConstMeta(
        debugName: "native_preference_store_set",
        argNames: ["that", "key", "value"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexConnection =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexConnection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexConnection =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexConnection;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexRepoDatabaseRead =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexRepoDatabaseRead;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexRepoDatabaseRead =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexRepoDatabaseRead;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AnnixPlayer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AnnixPlayer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AnnixPlayer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AnnixPlayer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexConnection dco_decode_RustOpaque_MutexConnection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexRepoDatabaseRead dco_decode_RustOpaque_MutexRepoDatabaseRead(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexRepoDatabaseReadImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AnnixPlayer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<PlayerStateEvent> dco_decode_StreamSink_player_state_event_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ProgressState> dco_decode_StreamSink_progress_state_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  AudioQuality dco_decode_audio_quality(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AudioQuality.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  LocalDb dco_decode_box_autoadd_local_db(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_local_db(raw);
  }

  @protected
  LocalStore dco_decode_box_autoadd_local_store(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_local_store(raw);
  }

  @protected
  NativePreferenceStore dco_decode_box_autoadd_native_preference_store(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_native_preference_store(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<UuidValue> dco_decode_list_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    const kUuidSizeInBytes = 16;
    final bytes = dco_decode_list_prim_u_8_strict(raw);
    return List.generate(
      bytes.lengthInBytes ~/ kUuidSizeInBytes,
      (i) => UuidValue.fromByteList(
          Uint8List.view(bytes.buffer, i * kUuidSizeInBytes, kUuidSizeInBytes)),
      growable: false,
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TagItem> dco_decode_list_tag_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag_item).toList();
  }

  @protected
  LocalDb dco_decode_local_db(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LocalDb(
      repo: dco_decode_RustOpaque_MutexRepoDatabaseRead(arr[0]),
    );
  }

  @protected
  LocalStore dco_decode_local_store(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LocalStore.raw(
      conn: dco_decode_RustOpaque_MutexConnection(arr[0]),
    );
  }

  @protected
  NativePreferenceStore dco_decode_native_preference_store(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NativePreferenceStore.raw(
      conn: dco_decode_RustOpaque_MutexConnection(arr[0]),
    );
  }

  @protected
  NetworkStatus dco_decode_network_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NetworkStatus.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlayerStateEvent dco_decode_player_state_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PlayerStateEvent.values[raw as int];
  }

  @protected
  ProgressState dco_decode_progress_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProgressState(
      position: dco_decode_u_32(arr[0]),
      duration: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  TagItem dco_decode_tag_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagItem(
      name: dco_decode_String(arr[0]),
      children: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AnnixPlayer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AnnixPlayer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexConnection sse_decode_RustOpaque_MutexConnection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexRepoDatabaseRead sse_decode_RustOpaque_MutexRepoDatabaseRead(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexRepoDatabaseReadImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AnnixPlayer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AnnixPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<PlayerStateEvent> sse_decode_StreamSink_player_state_event_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ProgressState> sse_decode_StreamSink_progress_state_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  AudioQuality sse_decode_audio_quality(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return AudioQuality.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  LocalDb sse_decode_box_autoadd_local_db(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_local_db(deserializer));
  }

  @protected
  LocalStore sse_decode_box_autoadd_local_store(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_local_store(deserializer));
  }

  @protected
  NativePreferenceStore sse_decode_box_autoadd_native_preference_store(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_native_preference_store(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<UuidValue> sse_decode_list_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UuidValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Uuid(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TagItem> sse_decode_list_tag_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TagItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag_item(deserializer));
    }
    return ans_;
  }

  @protected
  LocalDb sse_decode_local_db(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_repo = sse_decode_RustOpaque_MutexRepoDatabaseRead(deserializer);
    return LocalDb(repo: var_repo);
  }

  @protected
  LocalStore sse_decode_local_store(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conn = sse_decode_RustOpaque_MutexConnection(deserializer);
    return LocalStore.raw(conn: var_conn);
  }

  @protected
  NativePreferenceStore sse_decode_native_preference_store(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conn = sse_decode_RustOpaque_MutexConnection(deserializer);
    return NativePreferenceStore.raw(conn: var_conn);
  }

  @protected
  NetworkStatus sse_decode_network_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NetworkStatus.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlayerStateEvent sse_decode_player_state_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PlayerStateEvent.values[inner];
  }

  @protected
  ProgressState sse_decode_progress_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_position = sse_decode_u_32(deserializer);
    var var_duration = sse_decode_u_32(deserializer);
    return ProgressState(position: var_position, duration: var_duration);
  }

  @protected
  TagItem sse_decode_tag_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_children = sse_decode_list_String(deserializer);
    return TagItem(name: var_name, children: var_children);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          AnnixPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AnnixPlayerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          AnnixPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AnnixPlayerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexConnection(
      MutexConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexConnectionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexRepoDatabaseRead(
      MutexRepoDatabaseRead self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexRepoDatabaseReadImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnnixPlayer(
          AnnixPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AnnixPlayerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_player_state_event_Sse(
      RustStreamSink<PlayerStateEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_player_state_event,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_progress_state_Sse(
      RustStreamSink<ProgressState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_progress_state,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_audio_quality(AudioQuality self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_local_db(LocalDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_local_db(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_local_store(
      LocalStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_local_store(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_native_preference_store(
      NativePreferenceStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_native_preference_store(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Uuid(List<UuidValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Uuid(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tag_item(List<TagItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag_item(item, serializer);
    }
  }

  @protected
  void sse_encode_local_db(LocalDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MutexRepoDatabaseRead(self.repo, serializer);
  }

  @protected
  void sse_encode_local_store(LocalStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MutexConnection(self.conn, serializer);
  }

  @protected
  void sse_encode_native_preference_store(
      NativePreferenceStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MutexConnection(self.conn, serializer);
  }

  @protected
  void sse_encode_network_status(NetworkStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_player_state_event(
      PlayerStateEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_progress_state(ProgressState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.position, serializer);
    sse_encode_u_32(self.duration, serializer);
  }

  @protected
  void sse_encode_tag_item(TagItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_list_String(self.children, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AnnixPlayerImpl extends RustOpaque implements AnnixPlayer {
  // Not to be used by end users
  AnnixPlayerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AnnixPlayerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AnnixPlayer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnnixPlayer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnnixPlayerPtr,
  );

  Future<void> addProvider(
          {required String url, required String auth, required int priority}) =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerAddProvider(
          that: this, url: url, auth: auth, priority: priority);

  Future<void> clearProvider() =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerClearProvider(
        that: this,
      );

  bool isPlaying() => RustLib.instance.api.crateApiPlayerAnnixPlayerIsPlaying(
        that: this,
      );

  Future<void> pause() => RustLib.instance.api.crateApiPlayerAnnixPlayerPause(
        that: this,
      );

  Future<void> play() => RustLib.instance.api.crateApiPlayerAnnixPlayerPlay(
        that: this,
      );

  Stream<PlayerStateEvent> playerStateStream() =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerPlayerStateStream(
        that: this,
      );

  Stream<ProgressState> progressStream() =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerProgressStream(
        that: this,
      );

  Future<void> seek({required int position}) => RustLib.instance.api
      .crateApiPlayerAnnixPlayerSeek(that: this, position: position);

  Future<void> setTrack(
          {required String identifier,
          required AudioQuality quality,
          required bool opus}) =>
      RustLib.instance.api.crateApiPlayerAnnixPlayerSetTrack(
          that: this, identifier: identifier, quality: quality, opus: opus);

  Future<void> setVolume({required double volume}) => RustLib.instance.api
      .crateApiPlayerAnnixPlayerSetVolume(that: this, volume: volume);

  Future<void> stop() => RustLib.instance.api.crateApiPlayerAnnixPlayerStop(
        that: this,
      );
}

@sealed
class MutexConnectionImpl extends RustOpaque implements MutexConnection {
  // Not to be used by end users
  MutexConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MutexConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MutexConnection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MutexConnectionPtr,
  );
}

@sealed
class MutexRepoDatabaseReadImpl extends RustOpaque
    implements MutexRepoDatabaseRead {
  // Not to be used by end users
  MutexRepoDatabaseReadImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexRepoDatabaseReadImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MutexRepoDatabaseRead,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MutexRepoDatabaseRead,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MutexRepoDatabaseReadPtr,
  );
}
